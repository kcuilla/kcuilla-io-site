<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Kyle Cuilla</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020</copyright><lastBuildDate>Sun, 05 Apr 2020 21:13:14 -0500</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Interactive Maps in R</title>
      <link>/post/maps-in-r/</link>
      <pubDate>Sun, 05 Apr 2020 21:13:14 -0500</pubDate>
      <guid>/post/maps-in-r/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post shows you how to create interactive maps in R using the &lt;a href=&#34;http://jkunst.com/highcharter/index.html&#34;&gt;highcharter&lt;/a&gt; package.&lt;/p&gt;
&lt;div id=&#34;why-interactive-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why Interactive Maps?&lt;/h2&gt;
&lt;p&gt;Static maps are an effective visual tool that communicate geographic data in an interpretive way that is generally lost if that data is only viewed in a spreadsheet.&lt;/p&gt;
&lt;p&gt;Adding interactivity to a map further improves data interpretability by allowing users to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explore the data by zooming in on areas of interest&lt;/li&gt;
&lt;li&gt;Choose what data values to be displayed or excluded&lt;/li&gt;
&lt;li&gt;Hover over an area of interest and get additional info/the exact value that’s being displayed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;interactive-choropleth-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interactive Choropleth Map&lt;/h2&gt;
&lt;p&gt;The first interactive map I will show you how to create is a population density map by county for the state of Texas:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/maps-in-r_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;prerequisites&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Before we get started, you will need to load the following packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
library(highcharter)
library(dplyr)
library(tidyr)
library(RColorBrewer)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-prep&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Prep&lt;/h3&gt;
&lt;p&gt;The dataset we’ll be using is from the &lt;a href=&#34;https://www.ers.usda.gov/data-products/atlas-of-rural-and-small-town-america/download-the-data/&#34;&gt;USDA ERS&lt;/a&gt;. The data is available in both xlsx and csv format. I downloaded the data in csv format and loaded the People.csv file which contains the population estimates:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;county_df &amp;lt;- fread(&amp;quot;C:/Users/Kyle/Downloads/People.csv&amp;quot;) %&amp;gt;% 
  filter(State == &amp;#39;TX&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataset contains FIPS codes for each county. In order to map this data, we will need to join it to the dataset containing the geographic information for each county from the &lt;code&gt;highcharter&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tx_counties &amp;lt;- get_data_from_map(download_map_data(&amp;quot;countries/us/us-tx-all&amp;quot;))

glimpse(tx_counties)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 254
## Variables: 7
## $ `hc-group`    &amp;lt;chr&amp;gt; &amp;quot;admin2&amp;quot;, &amp;quot;admin2&amp;quot;, &amp;quot;admin2&amp;quot;, &amp;quot;admin2&amp;quot;, &amp;quot;admin2&amp;quot;, &amp;quot;ad...
## $ `hc-middle-x` &amp;lt;dbl&amp;gt; 0.50, 0.50, 0.50, 0.50, 0.50, 0.52, 0.36, 0.50, 0.50,...
## $ `hc-middle-y` &amp;lt;dbl&amp;gt; 0.50, 0.50, 0.50, 0.50, 0.77, 0.50, 0.36, 0.50, 0.50,...
## $ `hc-key`      &amp;lt;chr&amp;gt; &amp;quot;us-tx-179&amp;quot;, &amp;quot;us-tx-393&amp;quot;, &amp;quot;us-tx-311&amp;quot;, &amp;quot;us-tx-131&amp;quot;, &amp;quot;...
## $ `hc-a2`       &amp;lt;chr&amp;gt; &amp;quot;GR&amp;quot;, &amp;quot;RO&amp;quot;, &amp;quot;MC&amp;quot;, &amp;quot;DU&amp;quot;, &amp;quot;LO&amp;quot;, &amp;quot;LE&amp;quot;, &amp;quot;HO&amp;quot;, &amp;quot;LA&amp;quot;, &amp;quot;BA&amp;quot;,...
## $ fips          &amp;lt;chr&amp;gt; &amp;quot;48179&amp;quot;, &amp;quot;48393&amp;quot;, &amp;quot;48311&amp;quot;, &amp;quot;48131&amp;quot;, &amp;quot;48297&amp;quot;, &amp;quot;48289&amp;quot;,...
## $ name          &amp;lt;chr&amp;gt; &amp;quot;Gray&amp;quot;, &amp;quot;Roberts&amp;quot;, &amp;quot;McMullen&amp;quot;, &amp;quot;Duval&amp;quot;, &amp;quot;Live Oak&amp;quot;, &amp;quot;...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before joining the datasets, we need to calculate the population density for 2018. We can do this by using &lt;code&gt;mutate&lt;/code&gt; from the &lt;code&gt;dplyr&lt;/code&gt; package to create a column called ‘density’ and divide the ‘TotalPopEst2018’ column by the ‘LandAreaSQMiles2010’ column as shown below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_df &amp;lt;- county_df %&amp;gt;% 
  select(c(fips=FIPS,County,TotalPopEst2018,LandAreaSQMiles2010)) %&amp;gt;%
  mutate(density = round(TotalPopEst2018/LandAreaSQMiles2010,0))

head(density_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    fips   County TotalPopEst2018 LandAreaSQMiles2010 density
## 1 48000    Texas        28701845           261231.71     110
## 2 48001 Anderson           58057             1062.60      55
## 3 48003  Andrews           18128             1500.71      12
## 4 48005 Angelina           87092              797.78     109
## 5 48007  Aransas           23792              252.07      94
## 6 48009   Archer            8786              903.11      10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-the-map&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating the Map&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;hcmap&lt;/code&gt; function from &lt;code&gt;highcharter&lt;/code&gt;, we can create a basic interactive map like this one:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_map &amp;lt;- hcmap(map = &amp;quot;countries/us/us-tx-all&amp;quot;, 
      data = density_df, 
      value = &amp;quot;density&amp;quot;, 
      joinBy = c(&amp;quot;fips&amp;quot;))  %&amp;gt;%
  hc_mapNavigation(enabled = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/maps-in-r_files/figure-html//widgets/widget_unnamed-chunk-8.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;customizing-the-map&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Customizing the Map&lt;/h4&gt;
&lt;p&gt;In the map above, the counties with the highest population densities clearly stand out. However, it is difficult to distinguish the differences between the counties with lower population densities.&lt;/p&gt;
&lt;p&gt;In order to correct this, we can assign color breaks to the data by utilizing the &lt;code&gt;hc_colorAxis&lt;/code&gt; function and assigning a color palette from the &lt;code&gt;RColorBrewer&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_map &amp;lt;- hcmap(map = &amp;quot;countries/us/us-tx-all&amp;quot;, 
      data = density_df, 
      value = &amp;quot;density&amp;quot;, 
      joinBy = c(&amp;quot;fips&amp;quot;),
      borderWidth = 0.3)  %&amp;gt;%
  hc_mapNavigation(enabled = TRUE) %&amp;gt;% 
  hc_legend(layout = &amp;quot;vertical&amp;quot;, 
            align = &amp;quot;right&amp;quot;,
            floating = TRUE, 
            valueDecimals = 0) %&amp;gt;% 
  hc_colorAxis(dataClasses = color_classes(breaks = c(0,10,25,50,100,250,500,1000,2500,max(density_df$density)),
              colors = brewer.pal(name=&amp;quot;YlOrRd&amp;quot;,n=9)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next thing we will need to do is modify what is displayed when you hover (or click if you are viewing on a mobile device) on a particular county.&lt;/p&gt;
&lt;p&gt;By creating a JavaScript function within the &lt;code&gt;hc_tooltip&lt;/code&gt; option, we can more clearly display the name and population density for each county.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_map &amp;lt;- density_map %&amp;gt;%
    hc_tooltip(formatter = JS(&amp;quot;function() {
  return (&amp;#39;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;County:&amp;lt;/b&amp;gt; &amp;#39; + this.point.County +
          &amp;#39;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;Population Density:&amp;lt;/b&amp;gt; &amp;#39; + this.point.density + &amp;#39; people per sq mi&amp;#39;
  )}&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the only thing left is to add a title and source to the map which we can do with the &lt;code&gt;hc_title&lt;/code&gt; and &lt;code&gt;hc_credits&lt;/code&gt; options:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_map &amp;lt;- density_map %&amp;gt;% 
  hc_title(text = &amp;quot;Population Density by County, 2018&amp;quot;) %&amp;gt;%
  hc_credits(enabled = TRUE,
             text = &amp;quot;Author: Kyle Cuilla, Data: USDA ERS&amp;quot;,
             href = &amp;quot;https://www.ers.usda.gov/data-products/atlas-of-rural-and-small-town-america/download-the-data/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is our final result!&lt;/p&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/maps-in-r_files/figure-html//widgets/widget_unnamed-chunk-12.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;animated-choropleth-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Animated Choropleth Map&lt;/h2&gt;
&lt;p&gt;So now we have our map that displays the population density by county in 2018.&lt;/p&gt;
&lt;p&gt;Let’s say that we want to see how the population density has changed over time. How would we go about doing this?&lt;/p&gt;
&lt;p&gt;Well, we could create nine separate maps (one for each year from 2010 to 2018), but this would take up a lot of space and because the maps would each be separate, and because each map would be separate, it may be difficult to detect subtle difference between each year.&lt;/p&gt;
&lt;p&gt;To solve these issues, we can create an animated map instead:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/maps-in-r_files/figure-html//widgets/widget_unnamed-chunk-14.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;data-prep-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Prep&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;county_df&lt;/code&gt; dataset we’ve been using contains estimated populations for each year.&lt;/p&gt;
&lt;p&gt;We can calculate the population densities for each of these years by creating a function called ‘pop_density’ and applying it to each population estimate.&lt;/p&gt;
&lt;p&gt;We can then use the &lt;code&gt;gather&lt;/code&gt; function from the &lt;code&gt;tidyr&lt;/code&gt; package to put all of the population densities into a single column called ‘density’ and all of the years into a single column called ‘years’.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pop_density &amp;lt;- function(x){
  round(x/county_df$LandAreaSQMiles2010,0)
}

density_df_by_year &amp;lt;- county_df %&amp;gt;% 
  select(c(FIPS,State,County,
           &amp;#39;2010&amp;#39;=TotalPopEst2010,
           &amp;#39;2011&amp;#39;=TotalPopEst2011,
           &amp;#39;2012&amp;#39;=TotalPopEst2012,
           &amp;#39;2013&amp;#39;=TotalPopEst2013,
           &amp;#39;2014&amp;#39;=TotalPopEst2014,
           &amp;#39;2015&amp;#39;=TotalPopEst2015,
           &amp;#39;2016&amp;#39;=TotalPopEst2016,
           &amp;#39;2017&amp;#39;=TotalPopEst2017,
           &amp;#39;2018&amp;#39;=TotalPopEst2018)) %&amp;gt;%
  mutate_at(vars(matches(&amp;quot;201&amp;quot;)),pop_density) %&amp;gt;%
  filter(State == &amp;#39;TX&amp;#39;) %&amp;gt;%
  gather(year,density,-c(FIPS,State,County)) %&amp;gt;%
  mutate(fips = ifelse(nchar(FIPS)&amp;lt;5,paste0(&amp;quot;0&amp;quot;,FIPS),FIPS)) %&amp;gt;%
  filter(!grepl(&amp;#39;000&amp;#39;,FIPS),
         !State == &amp;#39;US&amp;#39;)

head(density_df_by_year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    FIPS State    County year density  fips
## 1 48001    TX  Anderson 2010      55 48001
## 2 48003    TX   Andrews 2010      10 48003
## 3 48005    TX  Angelina 2010     109 48005
## 4 48007    TX   Aransas 2010      92 48007
## 5 48009    TX    Archer 2010      10 48009
## 6 48011    TX Armstrong 2010       2 48011&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The animated &lt;code&gt;highcarter&lt;/code&gt; map needs the population densities in a single list called ‘sequence’ in order to work properly. We can create the list of densities by using the &lt;code&gt;list_parse&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_df_seq &amp;lt;- density_df_by_year %&amp;gt;%
  group_by(fips) %&amp;gt;%
  do(sequence = list_parse(select(., value = density)))

head(density_df_seq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [6 x 2]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 6 x 2
##    fips sequence  
##   &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;    
## 1 48001 &amp;lt;list [9]&amp;gt;
## 2 48003 &amp;lt;list [9]&amp;gt;
## 3 48005 &amp;lt;list [9]&amp;gt;
## 4 48007 &amp;lt;list [9]&amp;gt;
## 5 48009 &amp;lt;list [9]&amp;gt;
## 6 48011 &amp;lt;list [9]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see in the output we have a column containing the FIPS codes for each county and a list of length 9 which contains one population density value for each year from 2010 to 2018.&lt;/p&gt;
&lt;p&gt;Next, we need to join this dataset back to the original dataset so that we have the county names, years, and population densities all in one dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;density_df_by_year &amp;lt;- left_join(density_df_by_year,density_df_seq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;fips&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(density_df_by_year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    FIPS State    County year density  fips
## 1 48001    TX  Anderson 2010      55 48001
## 2 48003    TX   Andrews 2010      10 48003
## 3 48005    TX  Angelina 2010     109 48005
## 4 48007    TX   Aransas 2010      92 48007
## 5 48009    TX    Archer 2010      10 48009
## 6 48011    TX Armstrong 2010       2 48011
##                                      sequence
## 1          55, 55, 55, 55, 54, 54, 54, 55, 55
## 2          10, 10, 11, 11, 12, 12, 12, 12, 12
## 3 109, 109, 110, 109, 110, 110, 110, 110, 109
## 4        92, 92, 93, 95, 97, 98, 100, 101, 94
## 5          10, 10, 10, 10, 10, 10, 10, 10, 10
## 6                   2, 2, 2, 2, 2, 2, 2, 2, 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-the-map-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating the Map&lt;/h3&gt;
&lt;p&gt;To create the animated map, all we need to do is take the existing &lt;code&gt;density_map&lt;/code&gt; that we created and update the dataset from &lt;code&gt;density_df&lt;/code&gt; to &lt;code&gt;density_df_by_year&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;animated_map &amp;lt;- hcmap(map = &amp;quot;countries/us/us-tx-all&amp;quot;, 
      data = density_df_by_year, 
      value = &amp;quot;density&amp;quot;, 
      joinBy = c(&amp;quot;fips&amp;quot;),
      borderWidth = 0.3)  %&amp;gt;%
  hc_mapNavigation(enabled = TRUE) %&amp;gt;% 
   hc_colorAxis(dataClasses = color_classes(breaks = c(0,10,25,50,100,250,500,1000,2500,max(density_df_by_year$density)),
              colors = brewer.pal(name=&amp;quot;YlOrRd&amp;quot;,n=9))) %&amp;gt;%
  hc_legend(layout = &amp;quot;vertical&amp;quot;, 
            align = &amp;quot;right&amp;quot;,
            floating = TRUE, 
            valueDecimals = 0) %&amp;gt;% 
    hc_tooltip(formatter = JS(&amp;quot;function() {
  return (&amp;#39;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;County:&amp;lt;/b&amp;gt; &amp;#39; + this.point.County +
          &amp;#39;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;Population Density:&amp;lt;/b&amp;gt; &amp;#39; + this.point.density + &amp;#39; people per sq mi&amp;#39;
  )}&amp;quot;)) %&amp;gt;%
  hc_title(text = &amp;quot;Population Density by County, 2010 to 2018&amp;quot;) %&amp;gt;%
  hc_credits(enabled = TRUE,
             text = &amp;quot;Author: Kyle Cuilla, Data: USDA ERS&amp;quot;,
             href = &amp;quot;https://www.ers.usda.gov/data-products/atlas-of-rural-and-small-town-america/download-the-data/&amp;quot;)  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then add the &lt;code&gt;hc_motion&lt;/code&gt; option to the map:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;animated_map &amp;lt;- animated_map %&amp;gt;% 
      hc_motion(enabled = TRUE, 
          series = 0, 
          autoPlay = TRUE,
          loop = TRUE,
          magnet = list(step =  0.03),
          labels = unique(density_df_by_year$year))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/maps-in-r_files/figure-html//widgets/widget_unnamed-chunk-20.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Create a Website in R Using the Blogdown Package</title>
      <link>/post/website-with-blogdown/</link>
      <pubDate>Thu, 06 Feb 2020 21:13:14 -0500</pubDate>
      <guid>/post/website-with-blogdown/</guid>
      <description>


&lt;p&gt;When comparing the different programming languages, what sets R apart from the rest is the community. I’ve learned an incredible amount from people who are constantly helping others by sharing their knowledge and hard work.&lt;/p&gt;
&lt;p&gt;Lately, I’ve been looking for ways to give back to the community and share some of the knowledge I’ve acquired over the years in hopes of helping others like myself. That’s when I stumbled upon &lt;code&gt;blogdown&lt;/code&gt;, an R package designed to help you create your own website.&lt;/p&gt;
&lt;p&gt;This post outlines how I was able to create my website using &lt;code&gt;blogdown&lt;/code&gt; and a couple other tools, as well as some resources that were beneficial to me during the process.&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;I highly recommend reading the first few chapters of &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;blogdown: Creating Websites with R Markdown&lt;/a&gt; by Yihui Xie, Amber Thomas, and Alison Presmanes Hill. Not only does the book teach you how to use the &lt;code&gt;blogdown&lt;/code&gt; package in R, but it also provides a good tutorial on &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, which controls the theme of your website, and &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;, which is what I’m using to host my site.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;github-and-rstudio&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;GitHub and RStudio&lt;/h1&gt;
&lt;p&gt;The first thing you will need to do is create a new repository on &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. If you are new to GitHub and are not sure how to do this, all you need to do is go to your GitHub account and click &lt;code&gt;New repository&lt;/code&gt; in the dropdown that looks like a plus (+) sign in the upper right-hand corner and give the repository a unique name.&lt;/p&gt;
&lt;p&gt;Once you’ve created the repository, you will need to install Git and set it up within RStudio. If you already have Git setup in RStudio, then skip ahead to the next paragraph. If it isn’t setup, then follow the instructions outlined in this &lt;a href=&#34;http://www.geo.uzh.ch/microsite/reproducible_research/post/rr-rstudio-git/&#34;&gt;post&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;p&gt;The next step is to create a new project in RStudio with Git version control by way of &lt;code&gt;File -&amp;gt; New Project -&amp;gt; Version Control -&amp;gt; Git&lt;/code&gt;. You will see the following form below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/gitform.PNG&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Repository URL:&lt;/b&gt; the URL of the GitHub repository you just made. For my site, this is &lt;a href=&#34;https://github.com/kcuilla/kcuilla-io-site&#34; class=&#34;uri&#34;&gt;https://github.com/kcuilla/kcuilla-io-site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Project directory name:&lt;/b&gt; the name of your GitHub repository. For my site, this is kcuilla-io-site&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Create project as a subdirectory of:&lt;/b&gt; the folder location on your local computer where all your files for the site will be stored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After filling out the form and clicking &lt;code&gt;Create Project&lt;/code&gt;, your GitHub repository will be linked to your project in RStudio and you will be able to see any changes you make to the files within your working directory in the &lt;code&gt;Git&lt;/code&gt; tab as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/gitenvironment.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown-and-hugo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Blogdown and Hugo&lt;/h1&gt;
&lt;p&gt;Install the &lt;code&gt;blogdown&lt;/code&gt; package and &lt;code&gt;Hugo&lt;/code&gt; in RStudio:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;blogdown&amp;quot;)
library(blogdown)
blogdown::install_hugo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pick a theme for your website from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt;. The theme I settled on was the &lt;a href=&#34;https://themes.gohugo.io/academic/&#34;&gt;Academic&lt;/a&gt; theme because I liked both the look and the functionality, but there are plenty of other options available as well.&lt;/p&gt;
&lt;p&gt;Once you have chosen a theme, you can download it using the following &lt;code&gt;blogdown&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Replace user/repo from the theme&amp;#39;s GitHub repository
blogdown::new_site(theme = &amp;#39;user/repo&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The files that control the contents of the theme should now be available in your working directory and you can view them by navigating through the &lt;code&gt;Files&lt;/code&gt; tab in RStudio as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/file_folders.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(Note: I will not go into detail on how to edit the configuration files as these differ for each theme. However, normally there are tutorials provided by the theme creators, and if you’re interested in the edits that I made for the Academic theme, you can view them on my &lt;a href=&#34;https://github.com/kcuilla/kcuilla.github.io&#34;&gt;GitHub&lt;/a&gt;)&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In order view your configuration edits to your site, run &lt;code&gt;blogdown::serve_site()&lt;/code&gt; and you will be able to see a preview of your website in the &lt;code&gt;Viewer&lt;/code&gt; tab in RStudio. You also have the option to view it in your browser by clicking the ‘Show in new window’ icon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;git-and-netlify&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Git and Netlify&lt;/h1&gt;
&lt;p&gt;Before deploying your site on Netlify, you’ll first need to push them to your GitHub repository using Git in RStudio.&lt;/p&gt;
&lt;p&gt;There are a couple ways to do this. If you are already comfortable using Git commands, then you can use &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; in your Terminal.&lt;/p&gt;
&lt;p&gt;However, if you’re unfamiliar with Git, RStudio has a Git interface that makes this step easier.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;Git&lt;/code&gt; tab, click the &lt;code&gt;Commit&lt;/code&gt; button. This will pop open a window that looks like the image shown below. You can select the changes you wish to commit by clicking the check boxes in the ‘Staged’ column. Then, you will need to provide a commit message that describes the changes you made before clicking the &lt;code&gt;Commit&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/gitcommit.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once you click &lt;code&gt;Commit&lt;/code&gt;, the files you selected should disappear, and now all you need to do is click the &lt;code&gt;Push&lt;/code&gt; button and the files will be pushed to your repository and you should be able to see them all in GitHub as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/githubpage.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that you have all of your files on GitHub, you can deploy your site using &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After signing up for an account, click the &lt;code&gt;New Site from Git&lt;/code&gt; button and follow the steps to link Netlify to your GitHub repository. Netlify will give you a randomly-generated domain name for you site, but you can change the name within the &lt;code&gt;Site Settings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Test out the site in your browser to make sure everything is up and running as expected:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/website.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want to make any edits to your site in the future, all you will need to do is edit the configuration files in RStudio, push the commits to your GitHub repository, and then Netlify will automatically update to display the new content.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
